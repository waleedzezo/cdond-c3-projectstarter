version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
  revert-migrations:
    description: Revert your last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            Check=$(curl --insecure  https://kvdb.io/9LkNKL7oNno1Fv373yXU98/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $Check == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi          
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
               cd frontend
               npm install
               npm run build
      - notify_slack_error
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: test frontend
          command : |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command : |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
                 --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --query "Reservations[*].Instances[*].[PublicIpAddress]" \
                 --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  configure-infrastructure:
    docker:
       - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["16:38:ac:c0:10:a2:1f:76:67:f9:33:f2:a6:01:ea:9f"] 
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
            pip install awscli
      - run:
          name: Get Public IP
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
                echo "###########################"
                cat ~/project/backend/migrations_dump.txt
                echo "###########################"
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                  curl -k https://kvdb.io/9LkNKL7oNno1Fv373yXU98/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                fi
                  # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
                 sudo apt-get update && sudo apt-get install -yy less
                 curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                 unzip awscliv2.zip
                 sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
             cd frontend
             npm install
             npm run build
             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-backend:
    docker:
       - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["16:38:ac:c0:10:a2:1f:76:67:f9:33:f2:a6:01:ea:9f"] 
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # install node js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

            # install Ansible
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y 
      - run:
          name: deploy backend
          command: |
            cd backend
            npm install
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/tasks

            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
             if curl "${API_URL}/api/status" | grep "ok"
             then
              echo "Backend is up & running ...."
               exit 0
             else
               exit 1
             fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
                if curl -s ${URL} | grep "Welcome"
                then
                    echo "Frontend is up & running ...."
                      exit 0
                else
                      exit 1
                fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip

      - run:
          name: Get old stack workflow id & save
          command: |
            # Fetch the Old workflow ID
               export OldWorkflowID=$(aws cloudformation \
               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
                echo OldWorkflowID: "${OldWorkflowID}"
                echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
                      echo $OldWorkflowID > ~/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

      - run:
          name: Update cloudfront distribution
          command: |
           aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
          # Fetch the stack names 
               export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                echo Stack names: "${STACKS[@]}" 

               OldWorkflowID=$(cat ~/OldWorkflowID.txt)
               echo OldWorkflowID: "${OldWorkflowID}"
               echo Current_CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
           if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            then
              echo '-----------------Delete Confirmed-----------------'  
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo '-----------------cannot cleanup-------------------'  
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend,deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]